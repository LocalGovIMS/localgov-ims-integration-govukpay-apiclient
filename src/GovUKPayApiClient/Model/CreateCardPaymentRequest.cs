/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// The Payment Request Payload
    /// </summary>
    [DataContract(Name = "CreateCardPaymentRequest")]
    public partial class CreateCardPaymentRequest : IEquatable<CreateCardPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// ISO-639-1 Alpha-2 code of a supported language to use on the payment pages
        /// </summary>
        /// <value>ISO-639-1 Alpha-2 code of a supported language to use on the payment pages</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 2

        }


        /// <summary>
        /// ISO-639-1 Alpha-2 code of a supported language to use on the payment pages
        /// </summary>
        /// <value>ISO-639-1 Alpha-2 code of a supported language to use on the payment pages</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCardPaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCardPaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCardPaymentRequest" /> class.
        /// </summary>
        /// <param name="amount">amount in pence (required).</param>
        /// <param name="delayedCapture">delayed capture flag.</param>
        /// <param name="description">payment description (required).</param>
        /// <param name="email">email.</param>
        /// <param name="language">ISO-639-1 Alpha-2 code of a supported language to use on the payment pages.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="moto">Mail Order / Telephone Order (MOTO) payment flag.</param>
        /// <param name="prefilledCardholderDetails">prefilledCardholderDetails.</param>
        /// <param name="reference">payment reference (required).</param>
        /// <param name="returnUrl">service return url (required).</param>
        public CreateCardPaymentRequest(int amount = default(int), bool delayedCapture = default(bool), string description = default(string), string email = default(string), LanguageEnum? language = default(LanguageEnum?), ExternalMetadata metadata = default(ExternalMetadata), bool moto = default(bool), PrefilledCardholderDetails prefilledCardholderDetails = default(PrefilledCardholderDetails), string reference = default(string), string returnUrl = default(string))
        {
            this.Amount = amount;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for CreateCardPaymentRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "reference" is required (not null)
            if (reference == null) {
                throw new ArgumentNullException("reference is a required property for CreateCardPaymentRequest and cannot be null");
            }
            this.Reference = reference;
            // to ensure "returnUrl" is required (not null)
            if (returnUrl == null) {
                throw new ArgumentNullException("returnUrl is a required property for CreateCardPaymentRequest and cannot be null");
            }
            this.ReturnUrl = returnUrl;
            this.DelayedCapture = delayedCapture;
            this.Email = email;
            this.Language = language;
            this.Metadata = metadata;
            this.Moto = moto;
            this.PrefilledCardholderDetails = prefilledCardholderDetails;
        }

        /// <summary>
        /// amount in pence
        /// </summary>
        /// <value>amount in pence</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// delayed capture flag
        /// </summary>
        /// <value>delayed capture flag</value>
        [DataMember(Name = "delayed_capture", EmitDefaultValue = true)]
        public bool DelayedCapture { get; set; }

        /// <summary>
        /// payment description
        /// </summary>
        /// <value>payment description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// email
        /// </summary>
        /// <value>email</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public ExternalMetadata Metadata { get; set; }

        /// <summary>
        /// Mail Order / Telephone Order (MOTO) payment flag
        /// </summary>
        /// <value>Mail Order / Telephone Order (MOTO) payment flag</value>
        [DataMember(Name = "moto", EmitDefaultValue = true)]
        public bool Moto { get; set; }

        /// <summary>
        /// Gets or Sets PrefilledCardholderDetails
        /// </summary>
        [DataMember(Name = "prefilled_cardholder_details", EmitDefaultValue = false)]
        public PrefilledCardholderDetails PrefilledCardholderDetails { get; set; }

        /// <summary>
        /// payment reference
        /// </summary>
        /// <value>payment reference</value>
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// service return url
        /// </summary>
        /// <value>service return url</value>
        [DataMember(Name = "return_url", IsRequired = true, EmitDefaultValue = false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCardPaymentRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DelayedCapture: ").Append(DelayedCapture).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Moto: ").Append(Moto).Append("\n");
            sb.Append("  PrefilledCardholderDetails: ").Append(PrefilledCardholderDetails).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCardPaymentRequest);
        }

        /// <summary>
        /// Returns true if CreateCardPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCardPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCardPaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.DelayedCapture == input.DelayedCapture ||
                    this.DelayedCapture.Equals(input.DelayedCapture)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Moto == input.Moto ||
                    this.Moto.Equals(input.Moto)
                ) && 
                (
                    this.PrefilledCardholderDetails == input.PrefilledCardholderDetails ||
                    (this.PrefilledCardholderDetails != null &&
                    this.PrefilledCardholderDetails.Equals(input.PrefilledCardholderDetails))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.DelayedCapture.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Language.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Moto.GetHashCode();
                if (this.PrefilledCardholderDetails != null)
                {
                    hashCode = (hashCode * 59) + this.PrefilledCardholderDetails.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ReturnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Amount (int) maximum
            if (this.Amount > (int)10000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value less than or equal to 10000000.", new [] { "Amount" });
            }

            // Amount (int) minimum
            if (this.Amount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new [] { "Amount" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 255.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if (this.Reference != null && this.Reference.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be greater than 0.", new [] { "Reference" });
            }

            // ReturnUrl (string) maxLength
            if (this.ReturnUrl != null && this.ReturnUrl.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnUrl, length must be less than 2000.", new [] { "ReturnUrl" });
            }

            // ReturnUrl (string) minLength
            if (this.ReturnUrl != null && this.ReturnUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnUrl, length must be greater than 0.", new [] { "ReturnUrl" });
            }

            yield break;
        }
    }

}
