/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// The Payment Refund Request Payload
    /// </summary>
    [DataContract(Name = "PaymentRefundRequest")]
    public partial class PaymentRefundRequest : IEquatable<PaymentRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRefundRequest" /> class.
        /// </summary>
        /// <param name="amount">Amount in pence. Can&#39;t be more than the available amount for refunds (required).</param>
        /// <param name="refundAmountAvailable">Amount in pence. Total amount still available before issuing the refund.</param>
        public PaymentRefundRequest(int amount = default(int), int refundAmountAvailable = default(int))
        {
            this.Amount = amount;
            this.RefundAmountAvailable = refundAmountAvailable;
        }

        /// <summary>
        /// Amount in pence. Can&#39;t be more than the available amount for refunds
        /// </summary>
        /// <value>Amount in pence. Can&#39;t be more than the available amount for refunds</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Amount in pence. Total amount still available before issuing the refund
        /// </summary>
        /// <value>Amount in pence. Total amount still available before issuing the refund</value>
        [DataMember(Name = "refund_amount_available", EmitDefaultValue = false)]
        public int RefundAmountAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRefundRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RefundAmountAvailable: ").Append(RefundAmountAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRefundRequest);
        }

        /// <summary>
        /// Returns true if PaymentRefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRefundRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.RefundAmountAvailable == input.RefundAmountAvailable ||
                    this.RefundAmountAvailable.Equals(input.RefundAmountAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.RefundAmountAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Amount (int) maximum
            if (this.Amount > (int)10000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value less than or equal to 10000000.", new [] { "Amount" });
            }

            // Amount (int) minimum
            if (this.Amount < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 1.", new [] { "Amount" });
            }

            // RefundAmountAvailable (int) maximum
            if (this.RefundAmountAvailable > (int)10000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundAmountAvailable, must be a value less than or equal to 10000000.", new [] { "RefundAmountAvailable" });
            }

            // RefundAmountAvailable (int) minimum
            if (this.RefundAmountAvailable < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefundAmountAvailable, must be a value greater than or equal to 1.", new [] { "RefundAmountAvailable" });
            }

            yield break;
        }
    }

}
