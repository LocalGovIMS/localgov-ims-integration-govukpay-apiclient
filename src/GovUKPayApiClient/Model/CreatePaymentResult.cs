/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// CreatePaymentResult
    /// </summary>
    [DataContract(Name = "CreatePaymentResult")]
    public partial class CreatePaymentResult : IEquatable<CreatePaymentResult>, IValidatableObject
    {
        /// <summary>
        /// Which language your users will see on the payment pages when they make a payment.
        /// </summary>
        /// <value>Which language your users will see on the payment pages when they make a payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 2

        }


        /// <summary>
        /// Which language your users will see on the payment pages when they make a payment.
        /// </summary>
        /// <value>Which language your users will see on the payment pages when they make a payment.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentResult" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="amount">The amount in pence..</param>
        /// <param name="cardDetails">cardDetails.</param>
        /// <param name="createdDate">The date you created the payment..</param>
        /// <param name="description">The human-readable description you gave the payment..</param>
        /// <param name="email">The email address of your user..</param>
        /// <param name="language">Which language your users will see on the payment pages when they make a payment..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="moto">Mail Order / Telephone Order (MOTO) payment flag..</param>
        /// <param name="paymentId">The unique identifier of the payment..</param>
        /// <param name="paymentProvider">paymentProvider.</param>
        /// <param name="providerId">The reference number the payment gateway associated with the payment..</param>
        /// <param name="reference">The reference number you associated with this payment..</param>
        /// <param name="refundSummary">refundSummary.</param>
        /// <param name="returnUrl">An HTTPS URL on your site that your user will be sent back to once they have completed their payment attempt on GOV.UK Pay..</param>
        /// <param name="settlementSummary">settlementSummary.</param>
        /// <param name="state">state.</param>
        public CreatePaymentResult(PaymentLinks links = default(PaymentLinks), long amount = default(long), CardDetails cardDetails = default(CardDetails), string createdDate = default(string), string description = default(string), string email = default(string), LanguageEnum? language = default(LanguageEnum?), ExternalMetadata metadata = default(ExternalMetadata), bool moto = default(bool), string paymentId = default(string), string paymentProvider = default(string), string providerId = default(string), string reference = default(string), RefundSummary refundSummary = default(RefundSummary), string returnUrl = default(string), PaymentSettlementSummary settlementSummary = default(PaymentSettlementSummary), PaymentState state = default(PaymentState))
        {
            this.Links = links;
            this.Amount = amount;
            this.CardDetails = cardDetails;
            this.CreatedDate = createdDate;
            this.Description = description;
            this.Email = email;
            this.Language = language;
            this.Metadata = metadata;
            this.Moto = moto;
            this.PaymentId = paymentId;
            this.PaymentProvider = paymentProvider;
            this.ProviderId = providerId;
            this.Reference = reference;
            this.RefundSummary = refundSummary;
            this.ReturnUrl = returnUrl;
            this.SettlementSummary = settlementSummary;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public PaymentLinks Links { get; set; }

        /// <summary>
        /// The amount in pence.
        /// </summary>
        /// <value>The amount in pence.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// Gets or Sets CardDetails
        /// </summary>
        [DataMember(Name = "card_details", EmitDefaultValue = false)]
        public CardDetails CardDetails { get; set; }

        /// <summary>
        /// The date you created the payment.
        /// </summary>
        /// <value>The date you created the payment.</value>
        [DataMember(Name = "created_date", EmitDefaultValue = false)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Whether to [delay capturing](https://docs.payments.service.gov.uk/optional_features/delayed_capture/) this payment.
        /// </summary>
        /// <value>Whether to [delay capturing](https://docs.payments.service.gov.uk/optional_features/delayed_capture/) this payment.</value>
        [DataMember(Name = "delayed_capture", EmitDefaultValue = true)]
        public bool DelayedCapture { get; private set; }

        /// <summary>
        /// Returns false as DelayedCapture should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDelayedCapture()
        {
            return false;
        }
        /// <summary>
        /// The human-readable description you gave the payment.
        /// </summary>
        /// <value>The human-readable description you gave the payment.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The email address of your user.
        /// </summary>
        /// <value>The email address of your user.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public ExternalMetadata Metadata { get; set; }

        /// <summary>
        /// Mail Order / Telephone Order (MOTO) payment flag.
        /// </summary>
        /// <value>Mail Order / Telephone Order (MOTO) payment flag.</value>
        [DataMember(Name = "moto", EmitDefaultValue = true)]
        public bool Moto { get; set; }

        /// <summary>
        /// The unique identifier of the payment.
        /// </summary>
        /// <value>The unique identifier of the payment.</value>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProvider
        /// </summary>
        [DataMember(Name = "payment_provider", EmitDefaultValue = false)]
        public string PaymentProvider { get; set; }

        /// <summary>
        /// The reference number the payment gateway associated with the payment.
        /// </summary>
        /// <value>The reference number the payment gateway associated with the payment.</value>
        [DataMember(Name = "provider_id", EmitDefaultValue = false)]
        public string ProviderId { get; set; }

        /// <summary>
        /// The reference number you associated with this payment.
        /// </summary>
        /// <value>The reference number you associated with this payment.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets RefundSummary
        /// </summary>
        [DataMember(Name = "refund_summary", EmitDefaultValue = false)]
        public RefundSummary RefundSummary { get; set; }

        /// <summary>
        /// An HTTPS URL on your site that your user will be sent back to once they have completed their payment attempt on GOV.UK Pay.
        /// </summary>
        /// <value>An HTTPS URL on your site that your user will be sent back to once they have completed their payment attempt on GOV.UK Pay.</value>
        [DataMember(Name = "return_url", EmitDefaultValue = false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets SettlementSummary
        /// </summary>
        [DataMember(Name = "settlement_summary", EmitDefaultValue = false)]
        public PaymentSettlementSummary SettlementSummary { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public PaymentState State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymentResult {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DelayedCapture: ").Append(DelayedCapture).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Moto: ").Append(Moto).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentProvider: ").Append(PaymentProvider).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  RefundSummary: ").Append(RefundSummary).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  SettlementSummary: ").Append(SettlementSummary).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePaymentResult);
        }

        /// <summary>
        /// Returns true if CreatePaymentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePaymentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePaymentResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CardDetails == input.CardDetails ||
                    (this.CardDetails != null &&
                    this.CardDetails.Equals(input.CardDetails))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.DelayedCapture == input.DelayedCapture ||
                    this.DelayedCapture.Equals(input.DelayedCapture)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Moto == input.Moto ||
                    this.Moto.Equals(input.Moto)
                ) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.PaymentProvider == input.PaymentProvider ||
                    (this.PaymentProvider != null &&
                    this.PaymentProvider.Equals(input.PaymentProvider))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.RefundSummary == input.RefundSummary ||
                    (this.RefundSummary != null &&
                    this.RefundSummary.Equals(input.RefundSummary))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.SettlementSummary == input.SettlementSummary ||
                    (this.SettlementSummary != null &&
                    this.SettlementSummary.Equals(input.SettlementSummary))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.CardDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CardDetails.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DelayedCapture.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Language.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Moto.GetHashCode();
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                if (this.PaymentProvider != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentProvider.GetHashCode();
                }
                if (this.ProviderId != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.RefundSummary != null)
                {
                    hashCode = (hashCode * 59) + this.RefundSummary.GetHashCode();
                }
                if (this.ReturnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUrl.GetHashCode();
                }
                if (this.SettlementSummary != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementSummary.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
