/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// A structure representing information about a settlement for refunds
    /// </summary>
    [DataContract(Name = "RefundSettlementSummary")]
    public partial class RefundSettlementSummary : IEquatable<RefundSettlementSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundSettlementSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public RefundSettlementSummary()
        {
        }

        /// <summary>
        /// The date that the transaction was refunded from the service&#39;s account.
        /// </summary>
        /// <value>The date that the transaction was refunded from the service&#39;s account.</value>
        [DataMember(Name = "settled_date", EmitDefaultValue = false)]
        public string SettledDate { get; private set; }

        /// <summary>
        /// Returns false as SettledDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSettledDate()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RefundSettlementSummary {\n");
            sb.Append("  SettledDate: ").Append(SettledDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundSettlementSummary);
        }

        /// <summary>
        /// Returns true if RefundSettlementSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundSettlementSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundSettlementSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettledDate == input.SettledDate ||
                    (this.SettledDate != null &&
                    this.SettledDate.Equals(input.SettledDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettledDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettledDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
