/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// prefilled_cardholder_details
    /// </summary>
    [DataContract(Name = "PrefilledCardholderDetails")]
    public partial class PrefilledCardholderDetails : IEquatable<PrefilledCardholderDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrefilledCardholderDetails" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="cardholderName">prefilled cardholder name.</param>
        public PrefilledCardholderDetails(Address billingAddress = default(Address), string cardholderName = default(string))
        {
            this.BillingAddress = billingAddress;
            this.CardholderName = cardholderName;
        }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billing_address", EmitDefaultValue = false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// prefilled cardholder name
        /// </summary>
        /// <value>prefilled cardholder name</value>
        [DataMember(Name = "cardholder_name", EmitDefaultValue = false)]
        public string CardholderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrefilledCardholderDetails {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrefilledCardholderDetails);
        }

        /// <summary>
        /// Returns true if PrefilledCardholderDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PrefilledCardholderDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrefilledCardholderDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.CardholderName == input.CardholderName ||
                    (this.CardholderName != null &&
                    this.CardholderName.Equals(input.CardholderName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.CardholderName != null)
                {
                    hashCode = (hashCode * 59) + this.CardholderName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CardholderName (string) maxLength
            if (this.CardholderName != null && this.CardholderName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderName, length must be less than 255.", new [] { "CardholderName" });
            }

            // CardholderName (string) minLength
            if (this.CardholderName != null && this.CardholderName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderName, length must be greater than 0.", new [] { "CardholderName" });
            }

            yield break;
        }
    }

}
