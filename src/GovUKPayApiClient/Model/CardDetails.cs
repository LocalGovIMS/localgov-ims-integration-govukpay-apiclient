/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// A structure representing the payment card
    /// </summary>
    [DataContract(Name = "CardDetails")]
    public partial class CardDetails : IEquatable<CardDetails>, IValidatableObject
    {
        /// <summary>
        /// The card type, &#x60;debit&#x60; or &#x60;credit&#x60; or &#x60;null&#x60; if not able to determine
        /// </summary>
        /// <value>The card type, &#x60;debit&#x60; or &#x60;credit&#x60; or &#x60;null&#x60; if not able to determine</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardTypeEnum
        {
            /// <summary>
            /// Enum Debit for value: debit
            /// </summary>
            [EnumMember(Value = "debit")]
            Debit = 1,

            /// <summary>
            /// Enum Credit for value: credit
            /// </summary>
            [EnumMember(Value = "credit")]
            Credit = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// The card type, &#x60;debit&#x60; or &#x60;credit&#x60; or &#x60;null&#x60; if not able to determine
        /// </summary>
        /// <value>The card type, &#x60;debit&#x60; or &#x60;credit&#x60; or &#x60;null&#x60; if not able to determine</value>
        [DataMember(Name = "card_type", EmitDefaultValue = false)]
        public CardTypeEnum? CardType { get; set; }

        /// <summary>
        /// Returns false as CardType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCardType()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDetails" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="cardholderName">cardholderName.</param>
        public CardDetails(Address billingAddress = default(Address), string cardholderName = default(string))
        {
            this.BillingAddress = billingAddress;
            this.CardholderName = cardholderName;
        }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billing_address", EmitDefaultValue = false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets CardBrand
        /// </summary>
        [DataMember(Name = "card_brand", EmitDefaultValue = false)]
        public string CardBrand { get; private set; }

        /// <summary>
        /// Returns false as CardBrand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCardBrand()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CardholderName
        /// </summary>
        [DataMember(Name = "cardholder_name", EmitDefaultValue = false)]
        public string CardholderName { get; set; }

        /// <summary>
        /// The expiry date of the card in MM/yy format
        /// </summary>
        /// <value>The expiry date of the card in MM/yy format</value>
        [DataMember(Name = "expiry_date", EmitDefaultValue = false)]
        public string ExpiryDate { get; private set; }

        /// <summary>
        /// Returns false as ExpiryDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpiryDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FirstDigitsCardNumber
        /// </summary>
        [DataMember(Name = "first_digits_card_number", EmitDefaultValue = false)]
        public string FirstDigitsCardNumber { get; private set; }

        /// <summary>
        /// Returns false as FirstDigitsCardNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstDigitsCardNumber()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastDigitsCardNumber
        /// </summary>
        [DataMember(Name = "last_digits_card_number", EmitDefaultValue = false)]
        public string LastDigitsCardNumber { get; private set; }

        /// <summary>
        /// Returns false as LastDigitsCardNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastDigitsCardNumber()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardDetails {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  FirstDigitsCardNumber: ").Append(FirstDigitsCardNumber).Append("\n");
            sb.Append("  LastDigitsCardNumber: ").Append(LastDigitsCardNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardDetails);
        }

        /// <summary>
        /// Returns true if CardDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CardDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.CardType == input.CardType ||
                    this.CardType.Equals(input.CardType)
                ) && 
                (
                    this.CardholderName == input.CardholderName ||
                    (this.CardholderName != null &&
                    this.CardholderName.Equals(input.CardholderName))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.FirstDigitsCardNumber == input.FirstDigitsCardNumber ||
                    (this.FirstDigitsCardNumber != null &&
                    this.FirstDigitsCardNumber.Equals(input.FirstDigitsCardNumber))
                ) && 
                (
                    this.LastDigitsCardNumber == input.LastDigitsCardNumber ||
                    (this.LastDigitsCardNumber != null &&
                    this.LastDigitsCardNumber.Equals(input.LastDigitsCardNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.CardBrand != null)
                {
                    hashCode = (hashCode * 59) + this.CardBrand.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CardType.GetHashCode();
                if (this.CardholderName != null)
                {
                    hashCode = (hashCode * 59) + this.CardholderName.GetHashCode();
                }
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                if (this.FirstDigitsCardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FirstDigitsCardNumber.GetHashCode();
                }
                if (this.LastDigitsCardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.LastDigitsCardNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
