/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// PaymentDetailForSearch
    /// </summary>
    [DataContract(Name = "PaymentDetailForSearch")]
    public partial class PaymentDetailForSearch : IEquatable<PaymentDetailForSearch>, IValidatableObject
    {
        /// <summary>
        /// How the payment will be authorised. Payments created in &#x60;web&#x60; mode require the paying user to visit the &#x60;next_url&#x60; to complete the payment.
        /// </summary>
        /// <value>How the payment will be authorised. Payments created in &#x60;web&#x60; mode require the paying user to visit the &#x60;next_url&#x60; to complete the payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthorisationModeEnum
        {
            /// <summary>
            /// Enum Web for value: web
            /// </summary>
            [EnumMember(Value = "web")]
            Web = 1,

            /// <summary>
            /// Enum MotoApi for value: moto_api
            /// </summary>
            [EnumMember(Value = "moto_api")]
            MotoApi = 2,

            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 3

        }


        /// <summary>
        /// How the payment will be authorised. Payments created in &#x60;web&#x60; mode require the paying user to visit the &#x60;next_url&#x60; to complete the payment.
        /// </summary>
        /// <value>How the payment will be authorised. Payments created in &#x60;web&#x60; mode require the paying user to visit the &#x60;next_url&#x60; to complete the payment.</value>
        [DataMember(Name = "authorisation_mode", EmitDefaultValue = false)]
        public AuthorisationModeEnum? AuthorisationMode { get; set; }
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 2

        }


        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetailForSearch" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="amount">amount.</param>
        /// <param name="authorisationMode">How the payment will be authorised. Payments created in &#x60;web&#x60; mode require the paying user to visit the &#x60;next_url&#x60; to complete the payment..</param>
        /// <param name="authorisationSummary">authorisationSummary.</param>
        /// <param name="cardDetails">cardDetails.</param>
        /// <param name="description">description.</param>
        /// <param name="email">email.</param>
        /// <param name="language">language.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="moto">Mail Order / Telephone Order (MOTO) payment flag.</param>
        /// <param name="reference">reference.</param>
        /// <param name="refundSummary">refundSummary.</param>
        /// <param name="settlementSummary">settlementSummary.</param>
        /// <param name="state">state.</param>
        public PaymentDetailForSearch(PaymentLinksForSearch links = default(PaymentLinksForSearch), long amount = default(long), AuthorisationModeEnum? authorisationMode = default(AuthorisationModeEnum?), AuthorisationSummary authorisationSummary = default(AuthorisationSummary), CardDetails cardDetails = default(CardDetails), string description = default(string), string email = default(string), LanguageEnum? language = default(LanguageEnum?), ExternalMetadata metadata = default(ExternalMetadata), bool moto = default(bool), string reference = default(string), RefundSummary refundSummary = default(RefundSummary), PaymentSettlementSummary settlementSummary = default(PaymentSettlementSummary), PaymentState state = default(PaymentState))
        {
            this.Links = links;
            this.Amount = amount;
            this.AuthorisationMode = authorisationMode;
            this.AuthorisationSummary = authorisationSummary;
            this.CardDetails = cardDetails;
            this.Description = description;
            this.Email = email;
            this.Language = language;
            this.Metadata = metadata;
            this.Moto = moto;
            this.Reference = reference;
            this.RefundSummary = refundSummary;
            this.SettlementSummary = settlementSummary;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public PaymentLinksForSearch Links { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// Gets or Sets AuthorisationSummary
        /// </summary>
        [DataMember(Name = "authorisation_summary", EmitDefaultValue = false)]
        public AuthorisationSummary AuthorisationSummary { get; set; }

        /// <summary>
        /// Card Brand. Deprecated, please use card_details.card_brand instead
        /// </summary>
        /// <value>Card Brand. Deprecated, please use card_details.card_brand instead</value>
        [DataMember(Name = "card_brand", EmitDefaultValue = false)]
        [Obsolete]
        public string CardBrand { get; private set; }

        /// <summary>
        /// Returns false as CardBrand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCardBrand()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CardDetails
        /// </summary>
        [DataMember(Name = "card_details", EmitDefaultValue = false)]
        public CardDetails CardDetails { get; set; }

        /// <summary>
        /// Gets or Sets CorporateCardSurcharge
        /// </summary>
        [DataMember(Name = "corporate_card_surcharge", EmitDefaultValue = false)]
        public long CorporateCardSurcharge { get; private set; }

        /// <summary>
        /// Returns false as CorporateCardSurcharge should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorporateCardSurcharge()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "created_date", EmitDefaultValue = false)]
        public string CreatedDate { get; private set; }

        /// <summary>
        /// Returns false as CreatedDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDate()
        {
            return false;
        }
        /// <summary>
        /// delayed capture flag
        /// </summary>
        /// <value>delayed capture flag</value>
        [DataMember(Name = "delayed_capture", EmitDefaultValue = true)]
        public bool DelayedCapture { get; private set; }

        /// <summary>
        /// Returns false as DelayedCapture should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDelayedCapture()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// processing fee taken by the GOV.UK Pay platform, in pence. Only available depending on payment service provider
        /// </summary>
        /// <value>processing fee taken by the GOV.UK Pay platform, in pence. Only available depending on payment service provider</value>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public long Fee { get; private set; }

        /// <summary>
        /// Returns false as Fee should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFee()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public ExternalMetadata Metadata { get; set; }

        /// <summary>
        /// Mail Order / Telephone Order (MOTO) payment flag
        /// </summary>
        /// <value>Mail Order / Telephone Order (MOTO) payment flag</value>
        [DataMember(Name = "moto", EmitDefaultValue = true)]
        public bool Moto { get; set; }

        /// <summary>
        /// amount including all surcharges and less all fees, in pence. Only available depending on payment service provider
        /// </summary>
        /// <value>amount including all surcharges and less all fees, in pence. Only available depending on payment service provider</value>
        [DataMember(Name = "net_amount", EmitDefaultValue = false)]
        public long NetAmount { get; private set; }

        /// <summary>
        /// Returns false as NetAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetAmount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string PaymentId { get; private set; }

        /// <summary>
        /// Returns false as PaymentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PaymentProvider
        /// </summary>
        [DataMember(Name = "payment_provider", EmitDefaultValue = false)]
        public string PaymentProvider { get; private set; }

        /// <summary>
        /// Returns false as PaymentProvider should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentProvider()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name = "provider_id", EmitDefaultValue = false)]
        public string ProviderId { get; private set; }

        /// <summary>
        /// Returns false as ProviderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProviderId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets RefundSummary
        /// </summary>
        [DataMember(Name = "refund_summary", EmitDefaultValue = false)]
        public RefundSummary RefundSummary { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name = "return_url", EmitDefaultValue = false)]
        public string ReturnUrl { get; private set; }

        /// <summary>
        /// Returns false as ReturnUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReturnUrl()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SettlementSummary
        /// </summary>
        [DataMember(Name = "settlement_summary", EmitDefaultValue = false)]
        public PaymentSettlementSummary SettlementSummary { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public PaymentState State { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public long TotalAmount { get; private set; }

        /// <summary>
        /// Returns false as TotalAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAmount()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetailForSearch {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AuthorisationMode: ").Append(AuthorisationMode).Append("\n");
            sb.Append("  AuthorisationSummary: ").Append(AuthorisationSummary).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("  CorporateCardSurcharge: ").Append(CorporateCardSurcharge).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DelayedCapture: ").Append(DelayedCapture).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Moto: ").Append(Moto).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentProvider: ").Append(PaymentProvider).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  RefundSummary: ").Append(RefundSummary).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  SettlementSummary: ").Append(SettlementSummary).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDetailForSearch);
        }

        /// <summary>
        /// Returns true if PaymentDetailForSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDetailForSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDetailForSearch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.AuthorisationMode == input.AuthorisationMode ||
                    this.AuthorisationMode.Equals(input.AuthorisationMode)
                ) && 
                (
                    this.AuthorisationSummary == input.AuthorisationSummary ||
                    (this.AuthorisationSummary != null &&
                    this.AuthorisationSummary.Equals(input.AuthorisationSummary))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.CardDetails == input.CardDetails ||
                    (this.CardDetails != null &&
                    this.CardDetails.Equals(input.CardDetails))
                ) && 
                (
                    this.CorporateCardSurcharge == input.CorporateCardSurcharge ||
                    this.CorporateCardSurcharge.Equals(input.CorporateCardSurcharge)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.DelayedCapture == input.DelayedCapture ||
                    this.DelayedCapture.Equals(input.DelayedCapture)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Moto == input.Moto ||
                    this.Moto.Equals(input.Moto)
                ) && 
                (
                    this.NetAmount == input.NetAmount ||
                    this.NetAmount.Equals(input.NetAmount)
                ) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.PaymentProvider == input.PaymentProvider ||
                    (this.PaymentProvider != null &&
                    this.PaymentProvider.Equals(input.PaymentProvider))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.RefundSummary == input.RefundSummary ||
                    (this.RefundSummary != null &&
                    this.RefundSummary.Equals(input.RefundSummary))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.SettlementSummary == input.SettlementSummary ||
                    (this.SettlementSummary != null &&
                    this.SettlementSummary.Equals(input.SettlementSummary))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorisationMode.GetHashCode();
                if (this.AuthorisationSummary != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorisationSummary.GetHashCode();
                }
                if (this.CardBrand != null)
                {
                    hashCode = (hashCode * 59) + this.CardBrand.GetHashCode();
                }
                if (this.CardDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CardDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CorporateCardSurcharge.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DelayedCapture.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                hashCode = (hashCode * 59) + this.Language.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Moto.GetHashCode();
                hashCode = (hashCode * 59) + this.NetAmount.GetHashCode();
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                if (this.PaymentProvider != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentProvider.GetHashCode();
                }
                if (this.ProviderId != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.RefundSummary != null)
                {
                    hashCode = (hashCode * 59) + this.RefundSummary.GetHashCode();
                }
                if (this.ReturnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUrl.GetHashCode();
                }
                if (this.SettlementSummary != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementSummary.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
