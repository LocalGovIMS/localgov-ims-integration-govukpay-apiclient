/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// Contains disputes matching your search criteria.
    /// </summary>
    [DataContract(Name = "DisputeDetailForSearch")]
    public partial class DisputeDetailForSearch : IEquatable<DisputeDetailForSearch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DisputeDetailForSearch" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="settlementSummary">settlementSummary.</param>
        public DisputeDetailForSearch(DisputeLinksForSearch links = default(DisputeLinksForSearch), SettlementSummary settlementSummary = default(SettlementSummary))
        {
            this.Links = links;
            this.SettlementSummary = settlementSummary;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public DisputeLinksForSearch Links { get; set; }

        /// <summary>
        /// The disputed amount in pence.
        /// </summary>
        /// <value>The disputed amount in pence.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public long Amount { get; private set; }

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return false;
        }
        /// <summary>
        /// The date and time the user&#39;s bank told GOV.UK Pay about this dispute.
        /// </summary>
        /// <value>The date and time the user&#39;s bank told GOV.UK Pay about this dispute.</value>
        [DataMember(Name = "created_date", EmitDefaultValue = false)]
        public string CreatedDate { get; private set; }

        /// <summary>
        /// Returns false as CreatedDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDate()
        {
            return false;
        }
        /// <summary>
        /// The unique ID GOV.UK Pay automatically associated with this dispute when the paying user disputed the payment.
        /// </summary>
        /// <value>The unique ID GOV.UK Pay automatically associated with this dispute when the paying user disputed the payment.</value>
        [DataMember(Name = "dispute_id", EmitDefaultValue = false)]
        public string DisputeId { get; private set; }

        /// <summary>
        /// Returns false as DisputeId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisputeId()
        {
            return false;
        }
        /// <summary>
        /// The deadline for submitting your supporting evidence. This value uses Coordinated Universal Time (UTC) and ISO 8601 format
        /// </summary>
        /// <value>The deadline for submitting your supporting evidence. This value uses Coordinated Universal Time (UTC) and ISO 8601 format</value>
        [DataMember(Name = "evidence_due_date", EmitDefaultValue = false)]
        public string EvidenceDueDate { get; private set; }

        /// <summary>
        /// Returns false as EvidenceDueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvidenceDueDate()
        {
            return false;
        }
        /// <summary>
        /// The payment service provider’s dispute fee, in pence.
        /// </summary>
        /// <value>The payment service provider’s dispute fee, in pence.</value>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public long Fee { get; private set; }

        /// <summary>
        /// Returns false as Fee should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFee()
        {
            return false;
        }
        /// <summary>
        /// The amount, in pence, your payment service provider will take for a lost dispute. &#39;net_amount&#39; is deducted from your payout after you lose the dispute. For example, a &#39;net_amount&#39; of &#39;-1500&#39; means your PSP will take £15.00 from your next payout into your bank account. &#39;net_amount&#39; is always a negative value. &#39;net_amount&#39; only appears if you lose the dispute.
        /// </summary>
        /// <value>The amount, in pence, your payment service provider will take for a lost dispute. &#39;net_amount&#39; is deducted from your payout after you lose the dispute. For example, a &#39;net_amount&#39; of &#39;-1500&#39; means your PSP will take £15.00 from your next payout into your bank account. &#39;net_amount&#39; is always a negative value. &#39;net_amount&#39; only appears if you lose the dispute.</value>
        [DataMember(Name = "net_amount", EmitDefaultValue = false)]
        public long NetAmount { get; private set; }

        /// <summary>
        /// Returns false as NetAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetAmount()
        {
            return false;
        }
        /// <summary>
        /// The unique ID GOV.UK Pay automatically associated with this payment when you created it.
        /// </summary>
        /// <value>The unique ID GOV.UK Pay automatically associated with this payment when you created it.</value>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string PaymentId { get; private set; }

        /// <summary>
        /// Returns false as PaymentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentId()
        {
            return false;
        }
        /// <summary>
        /// The reason the paying user gave for disputing this payment. Possible values are: &#39;credit_not_processed&#39;, &#39;duplicate&#39;, &#39;fraudulent&#39;, &#39;general&#39;, &#39;product_not_received&#39;, &#39;product_unacceptable&#39;, &#39;unrecognised&#39;, &#39;subscription_cancelled&#39;, &gt;&#39;other&#39;
        /// </summary>
        /// <value>The reason the paying user gave for disputing this payment. Possible values are: &#39;credit_not_processed&#39;, &#39;duplicate&#39;, &#39;fraudulent&#39;, &#39;general&#39;, &#39;product_not_received&#39;, &#39;product_unacceptable&#39;, &#39;unrecognised&#39;, &#39;subscription_cancelled&#39;, &gt;&#39;other&#39;</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; private set; }

        /// <summary>
        /// Returns false as Reason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReason()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SettlementSummary
        /// </summary>
        [DataMember(Name = "settlement_summary", EmitDefaultValue = false)]
        public SettlementSummary SettlementSummary { get; set; }

        /// <summary>
        /// The current status of the dispute. Possible values are: &#39;needs_response&#39;, &#39;won&#39;, &#39;lost&#39;, &#39;under_review&#39;
        /// </summary>
        /// <value>The current status of the dispute. Possible values are: &#39;needs_response&#39;, &#39;won&#39;, &#39;lost&#39;, &#39;under_review&#39;</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DisputeDetailForSearch {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DisputeId: ").Append(DisputeId).Append("\n");
            sb.Append("  EvidenceDueDate: ").Append(EvidenceDueDate).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SettlementSummary: ").Append(SettlementSummary).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisputeDetailForSearch);
        }

        /// <summary>
        /// Returns true if DisputeDetailForSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of DisputeDetailForSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisputeDetailForSearch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.DisputeId == input.DisputeId ||
                    (this.DisputeId != null &&
                    this.DisputeId.Equals(input.DisputeId))
                ) && 
                (
                    this.EvidenceDueDate == input.EvidenceDueDate ||
                    (this.EvidenceDueDate != null &&
                    this.EvidenceDueDate.Equals(input.EvidenceDueDate))
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.NetAmount == input.NetAmount ||
                    this.NetAmount.Equals(input.NetAmount)
                ) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.SettlementSummary == input.SettlementSummary ||
                    (this.SettlementSummary != null &&
                    this.SettlementSummary.Equals(input.SettlementSummary))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.DisputeId != null)
                {
                    hashCode = (hashCode * 59) + this.DisputeId.GetHashCode();
                }
                if (this.EvidenceDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.EvidenceDueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                hashCode = (hashCode * 59) + this.NetAmount.GetHashCode();
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.SettlementSummary != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementSummary.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
