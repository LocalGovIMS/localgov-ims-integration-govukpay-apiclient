/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GovUKPayApiClient.Client.OpenAPIDateConverter;

namespace GovUKPayApiClient.Model
{
    /// <summary>
    /// Contains the user&#39;s payment information. This information will be sent to the payment service provider to authorise the payment.
    /// </summary>
    [DataContract(Name = "AuthorisationRequest")]
    public partial class AuthorisationRequest : IEquatable<AuthorisationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorisationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorisationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorisationRequest" /> class.
        /// </summary>
        /// <param name="cardNumber">The full card number from the paying user&#39;s card. (required).</param>
        /// <param name="cardholderName">The name on the paying user&#39;s card. (required).</param>
        /// <param name="cvc">The card verification code (CVC) or card verification value (CVV) on the paying user&#39;s card. (required).</param>
        /// <param name="expiryDate">The expiry date of the paying user&#39;s card. This value must be in &#x60;MM/YY&#x60; format. (required).</param>
        /// <param name="oneTimeToken">This single use token authorises your request and matches it to a payment. GOV.UK Pay generated the &#x60;one_time_token&#x60; when the payment was created. (required).</param>
        public AuthorisationRequest(string cardNumber = default(string), string cardholderName = default(string), string cvc = default(string), string expiryDate = default(string), string oneTimeToken = default(string))
        {
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new ArgumentNullException("cardNumber is a required property for AuthorisationRequest and cannot be null");
            }
            this.CardNumber = cardNumber;
            // to ensure "cardholderName" is required (not null)
            if (cardholderName == null)
            {
                throw new ArgumentNullException("cardholderName is a required property for AuthorisationRequest and cannot be null");
            }
            this.CardholderName = cardholderName;
            // to ensure "cvc" is required (not null)
            if (cvc == null)
            {
                throw new ArgumentNullException("cvc is a required property for AuthorisationRequest and cannot be null");
            }
            this.Cvc = cvc;
            // to ensure "expiryDate" is required (not null)
            if (expiryDate == null)
            {
                throw new ArgumentNullException("expiryDate is a required property for AuthorisationRequest and cannot be null");
            }
            this.ExpiryDate = expiryDate;
            // to ensure "oneTimeToken" is required (not null)
            if (oneTimeToken == null)
            {
                throw new ArgumentNullException("oneTimeToken is a required property for AuthorisationRequest and cannot be null");
            }
            this.OneTimeToken = oneTimeToken;
        }

        /// <summary>
        /// The full card number from the paying user&#39;s card.
        /// </summary>
        /// <value>The full card number from the paying user&#39;s card.</value>
        [DataMember(Name = "card_number", IsRequired = true, EmitDefaultValue = false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// The name on the paying user&#39;s card.
        /// </summary>
        /// <value>The name on the paying user&#39;s card.</value>
        [DataMember(Name = "cardholder_name", IsRequired = true, EmitDefaultValue = false)]
        public string CardholderName { get; set; }

        /// <summary>
        /// The card verification code (CVC) or card verification value (CVV) on the paying user&#39;s card.
        /// </summary>
        /// <value>The card verification code (CVC) or card verification value (CVV) on the paying user&#39;s card.</value>
        [DataMember(Name = "cvc", IsRequired = true, EmitDefaultValue = false)]
        public string Cvc { get; set; }

        /// <summary>
        /// The expiry date of the paying user&#39;s card. This value must be in &#x60;MM/YY&#x60; format.
        /// </summary>
        /// <value>The expiry date of the paying user&#39;s card. This value must be in &#x60;MM/YY&#x60; format.</value>
        [DataMember(Name = "expiry_date", IsRequired = true, EmitDefaultValue = false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// This single use token authorises your request and matches it to a payment. GOV.UK Pay generated the &#x60;one_time_token&#x60; when the payment was created.
        /// </summary>
        /// <value>This single use token authorises your request and matches it to a payment. GOV.UK Pay generated the &#x60;one_time_token&#x60; when the payment was created.</value>
        [DataMember(Name = "one_time_token", IsRequired = true, EmitDefaultValue = false)]
        public string OneTimeToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorisationRequest {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  OneTimeToken: ").Append(OneTimeToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorisationRequest);
        }

        /// <summary>
        /// Returns true if AuthorisationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorisationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorisationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardholderName == input.CardholderName ||
                    (this.CardholderName != null &&
                    this.CardholderName.Equals(input.CardholderName))
                ) && 
                (
                    this.Cvc == input.Cvc ||
                    (this.Cvc != null &&
                    this.Cvc.Equals(input.Cvc))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.OneTimeToken == input.OneTimeToken ||
                    (this.OneTimeToken != null &&
                    this.OneTimeToken.Equals(input.OneTimeToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CardNumber.GetHashCode();
                }
                if (this.CardholderName != null)
                {
                    hashCode = (hashCode * 59) + this.CardholderName.GetHashCode();
                }
                if (this.Cvc != null)
                {
                    hashCode = (hashCode * 59) + this.Cvc.GetHashCode();
                }
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                if (this.OneTimeToken != null)
                {
                    hashCode = (hashCode * 59) + this.OneTimeToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CardNumber (string) maxLength
            if (this.CardNumber != null && this.CardNumber.Length > 19)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardNumber, length must be less than 19.", new [] { "CardNumber" });
            }

            // CardNumber (string) minLength
            if (this.CardNumber != null && this.CardNumber.Length < 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardNumber, length must be greater than 12.", new [] { "CardNumber" });
            }

            // CardholderName (string) maxLength
            if (this.CardholderName != null && this.CardholderName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderName, length must be less than 255.", new [] { "CardholderName" });
            }

            // CardholderName (string) minLength
            if (this.CardholderName != null && this.CardholderName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderName, length must be greater than 0.", new [] { "CardholderName" });
            }

            // Cvc (string) maxLength
            if (this.Cvc != null && this.Cvc.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cvc, length must be less than 4.", new [] { "Cvc" });
            }

            // Cvc (string) minLength
            if (this.Cvc != null && this.Cvc.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cvc, length must be greater than 3.", new [] { "Cvc" });
            }

            // ExpiryDate (string) maxLength
            if (this.ExpiryDate != null && this.ExpiryDate.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, length must be less than 5.", new [] { "ExpiryDate" });
            }

            // ExpiryDate (string) minLength
            if (this.ExpiryDate != null && this.ExpiryDate.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpiryDate, length must be greater than 5.", new [] { "ExpiryDate" });
            }

            yield break;
        }
    }

}
