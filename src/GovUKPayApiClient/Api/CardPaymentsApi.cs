/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GovUKPayApiClient.Client;
using GovUKPayApiClient.Model;

namespace GovUKPayApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        /// Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns></returns>
        void CancelAPayment(string paymentId);

        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        /// Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelAPaymentWithHttpInfo(string paymentId);
        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns></returns>
        void CaptureAPayment(string paymentId);

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CaptureAPaymentWithHttpInfo(string paymentId);
        /// <summary>
        /// Create new payment
        /// </summary>
        /// <remarks>
        /// Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <returns>CreatePaymentResult</returns>
        CreatePaymentResult CreateAPayment(CreateCardPaymentRequest createCardPaymentRequest);

        /// <summary>
        /// Create new payment
        /// </summary>
        /// <remarks>
        /// Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <returns>ApiResponse of CreatePaymentResult</returns>
        ApiResponse<CreatePaymentResult> CreateAPaymentWithHttpInfo(CreateCardPaymentRequest createCardPaymentRequest);
        /// <summary>
        /// Find payment by ID
        /// </summary>
        /// <remarks>
        /// Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>GetPaymentResult</returns>
        GetPaymentResult GetAPayment(string paymentId);

        /// <summary>
        /// Find payment by ID
        /// </summary>
        /// <remarks>
        /// Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of GetPaymentResult</returns>
        ApiResponse<GetPaymentResult> GetAPaymentWithHttpInfo(string paymentId);
        /// <summary>
        /// Return payment events by ID
        /// </summary>
        /// <remarks>
        /// Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>PaymentEvents</returns>
        PaymentEvents GetEventsForAPayment(string paymentId);

        /// <summary>
        /// Return payment events by ID
        /// </summary>
        /// <remarks>
        /// Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of PaymentEvents</returns>
        ApiResponse<PaymentEvents> GetEventsForAPaymentWithHttpInfo(string paymentId);
        /// <summary>
        /// Search payments
        /// </summary>
        /// <remarks>
        /// Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <returns>PaymentSearchResults</returns>
        PaymentSearchResults SearchPayments(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string));

        /// <summary>
        /// Search payments
        /// </summary>
        /// <remarks>
        /// Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <returns>ApiResponse of PaymentSearchResults</returns>
        ApiResponse<PaymentSearchResults> SearchPaymentsWithHttpInfo(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        /// Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        /// Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CaptureAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        /// Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CaptureAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new payment
        /// </summary>
        /// <remarks>
        /// Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentResult</returns>
        System.Threading.Tasks.Task<CreatePaymentResult> CreateAPaymentAsync(CreateCardPaymentRequest createCardPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new payment
        /// </summary>
        /// <remarks>
        /// Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentResult>> CreateAPaymentWithHttpInfoAsync(CreateCardPaymentRequest createCardPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find payment by ID
        /// </summary>
        /// <remarks>
        /// Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentResult</returns>
        System.Threading.Tasks.Task<GetPaymentResult> GetAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find payment by ID
        /// </summary>
        /// <remarks>
        /// Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentResult>> GetAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return payment events by ID
        /// </summary>
        /// <remarks>
        /// Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentEvents</returns>
        System.Threading.Tasks.Task<PaymentEvents> GetEventsForAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return payment events by ID
        /// </summary>
        /// <remarks>
        /// Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentEvents>> GetEventsForAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search payments
        /// </summary>
        /// <remarks>
        /// Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentSearchResults</returns>
        System.Threading.Tasks.Task<PaymentSearchResults> SearchPaymentsAsync(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search payments
        /// </summary>
        /// <remarks>
        /// Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentSearchResults>> SearchPaymentsWithHttpInfoAsync(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardPaymentsApi : ICardPaymentsApiSync, ICardPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardPaymentsApi : ICardPaymentsApi
    {
        private GovUKPayApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardPaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardPaymentsApi(string basePath)
        {
            this.Configuration = GovUKPayApiClient.Client.Configuration.MergeConfigurations(
                GovUKPayApiClient.Client.GlobalConfiguration.Instance,
                new GovUKPayApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardPaymentsApi(GovUKPayApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GovUKPayApiClient.Client.Configuration.MergeConfigurations(
                GovUKPayApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CardPaymentsApi(GovUKPayApiClient.Client.ISynchronousClient client, GovUKPayApiClient.Client.IAsynchronousClient asyncClient, GovUKPayApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GovUKPayApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GovUKPayApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GovUKPayApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GovUKPayApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel payment Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns></returns>
        public void CancelAPayment(string paymentId)
        {
            CancelAPaymentWithHttpInfo(paymentId);
        }

        /// <summary>
        /// Cancel payment Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GovUKPayApiClient.Client.ApiResponse<Object> CancelAPaymentWithHttpInfo(string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->CancelAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/payments/{paymentId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel payment Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelAPaymentWithHttpInfoAsync(paymentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel payment Cancel a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be cancelled if it&#39;s in a state that isn&#39;t finished.
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<Object>> CancelAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->CancelAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/payments/{paymentId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Capture payment Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns></returns>
        public void CaptureAPayment(string paymentId)
        {
            CaptureAPaymentWithHttpInfo(paymentId);
        }

        /// <summary>
        /// Capture payment Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GovUKPayApiClient.Client.ApiResponse<Object> CaptureAPaymentWithHttpInfo(string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->CaptureAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/payments/{paymentId}/capture", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CaptureAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Capture payment Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CaptureAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CaptureAPaymentWithHttpInfoAsync(paymentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Capture payment Capture a payment based on the provided payment ID and the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;. A payment can only be captured if it&#39;s in &#39;submitted&#39; state
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<Object>> CaptureAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->CaptureAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/payments/{paymentId}/capture", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CaptureAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new payment Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <returns>CreatePaymentResult</returns>
        public CreatePaymentResult CreateAPayment(CreateCardPaymentRequest createCardPaymentRequest)
        {
            GovUKPayApiClient.Client.ApiResponse<CreatePaymentResult> localVarResponse = CreateAPaymentWithHttpInfo(createCardPaymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new payment Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <returns>ApiResponse of CreatePaymentResult</returns>
        public GovUKPayApiClient.Client.ApiResponse<CreatePaymentResult> CreateAPaymentWithHttpInfo(CreateCardPaymentRequest createCardPaymentRequest)
        {
            // verify the required parameter 'createCardPaymentRequest' is set
            if (createCardPaymentRequest == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'createCardPaymentRequest' when calling CardPaymentsApi->CreateAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCardPaymentRequest;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePaymentResult>("/v1/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new payment Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentResult</returns>
        public async System.Threading.Tasks.Task<CreatePaymentResult> CreateAPaymentAsync(CreateCardPaymentRequest createCardPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<CreatePaymentResult> localVarResponse = await CreateAPaymentWithHttpInfoAsync(createCardPaymentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new payment Create a new payment for the account associated to the Authorisation token. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCardPaymentRequest">requestPayload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentResult)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<CreatePaymentResult>> CreateAPaymentWithHttpInfoAsync(CreateCardPaymentRequest createCardPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCardPaymentRequest' is set
            if (createCardPaymentRequest == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'createCardPaymentRequest' when calling CardPaymentsApi->CreateAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCardPaymentRequest;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePaymentResult>("/v1/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find payment by ID Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>GetPaymentResult</returns>
        public GetPaymentResult GetAPayment(string paymentId)
        {
            GovUKPayApiClient.Client.ApiResponse<GetPaymentResult> localVarResponse = GetAPaymentWithHttpInfo(paymentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find payment by ID Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of GetPaymentResult</returns>
        public GovUKPayApiClient.Client.ApiResponse<GetPaymentResult> GetAPaymentWithHttpInfo(string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->GetAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPaymentResult>("/v1/payments/{paymentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find payment by ID Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentResult</returns>
        public async System.Threading.Tasks.Task<GetPaymentResult> GetAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<GetPaymentResult> localVarResponse = await GetAPaymentWithHttpInfoAsync(paymentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find payment by ID Return information about the payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentResult)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<GetPaymentResult>> GetAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->GetAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPaymentResult>("/v1/payments/{paymentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return payment events by ID Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>PaymentEvents</returns>
        public PaymentEvents GetEventsForAPayment(string paymentId)
        {
            GovUKPayApiClient.Client.ApiResponse<PaymentEvents> localVarResponse = GetEventsForAPaymentWithHttpInfo(paymentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return payment events by ID Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <returns>ApiResponse of PaymentEvents</returns>
        public GovUKPayApiClient.Client.ApiResponse<PaymentEvents> GetEventsForAPaymentWithHttpInfo(string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->GetEventsForAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentEvents>("/v1/payments/{paymentId}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsForAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return payment events by ID Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentEvents</returns>
        public async System.Threading.Tasks.Task<PaymentEvents> GetEventsForAPaymentAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<PaymentEvents> localVarResponse = await GetEventsForAPaymentWithHttpInfoAsync(paymentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return payment events by ID Return payment events information about a certain payment The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Payment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentEvents)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<PaymentEvents>> GetEventsForAPaymentWithHttpInfoAsync(string paymentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CardPaymentsApi->GetEventsForAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentEvents>("/v1/payments/{paymentId}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsForAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search payments Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <returns>PaymentSearchResults</returns>
        public PaymentSearchResults SearchPayments(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string))
        {
            GovUKPayApiClient.Client.ApiResponse<PaymentSearchResults> localVarResponse = SearchPaymentsWithHttpInfo(reference, email, state, cardBrand, fromDate, toDate, page, displaySize, cardholderName, firstDigitsCardNumber, lastDigitsCardNumber, fromSettledDate, toSettledDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search payments Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <returns>ApiResponse of PaymentSearchResults</returns>
        public GovUKPayApiClient.Client.ApiResponse<PaymentSearchResults> SearchPaymentsWithHttpInfo(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string))
        {
            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (cardBrand != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "card_brand", cardBrand));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (displaySize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "display_size", displaySize));
            }
            if (cardholderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "cardholder_name", cardholderName));
            }
            if (firstDigitsCardNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "first_digits_card_number", firstDigitsCardNumber));
            }
            if (lastDigitsCardNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "last_digits_card_number", lastDigitsCardNumber));
            }
            if (fromSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_settled_date", fromSettledDate));
            }
            if (toSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_settled_date", toSettledDate));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentSearchResults>("/v1/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search payments Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentSearchResults</returns>
        public async System.Threading.Tasks.Task<PaymentSearchResults> SearchPaymentsAsync(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<PaymentSearchResults> localVarResponse = await SearchPaymentsWithHttpInfoAsync(reference, email, state, cardBrand, fromDate, toDate, page, displaySize, cardholderName, firstDigitsCardNumber, lastDigitsCardNumber, fromSettledDate, toSettledDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search payments Search payments by reference, state, &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">Your payment reference to search (exact match, case insensitive) (optional)</param>
        /// <param name="email">The user email used in the payment to be searched (optional)</param>
        /// <param name="state">State of payments to be searched. Example&#x3D;success (optional)</param>
        /// <param name="cardBrand">Card brand used for payment. Example&#x3D;master-card (optional)</param>
        /// <param name="fromDate">From date of payments to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of payments to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="cardholderName">Name on card used to make payment (optional)</param>
        /// <param name="firstDigitsCardNumber">First six digits of the card used to make payment (optional)</param>
        /// <param name="lastDigitsCardNumber">Last four digits of the card used to make payment (optional)</param>
        /// <param name="fromSettledDate">From settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of payment to be searched (this date is inclusive). Example&#x3D;2015-08-14 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentSearchResults)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<PaymentSearchResults>> SearchPaymentsWithHttpInfoAsync(string reference = default(string), string email = default(string), string state = default(string), string cardBrand = default(string), string fromDate = default(string), string toDate = default(string), string page = default(string), string displaySize = default(string), string cardholderName = default(string), string firstDigitsCardNumber = default(string), string lastDigitsCardNumber = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (cardBrand != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "card_brand", cardBrand));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (displaySize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "display_size", displaySize));
            }
            if (cardholderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "cardholder_name", cardholderName));
            }
            if (firstDigitsCardNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "first_digits_card_number", firstDigitsCardNumber));
            }
            if (lastDigitsCardNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "last_digits_card_number", lastDigitsCardNumber));
            }
            if (fromSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_settled_date", fromSettledDate));
            }
            if (toSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_settled_date", toSettledDate));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentSearchResults>("/v1/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
