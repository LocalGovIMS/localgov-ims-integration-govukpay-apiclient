/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GovUKPayApiClient.Client;
using GovUKPayApiClient.Model;

namespace GovUKPayApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundingCardPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find payment refund by ID
        /// </summary>
        /// <remarks>
        /// Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Refund</returns>
        Refund GetAPaymentRefund(string paymentId, string refundId, int operationIndex = 0);

        /// <summary>
        /// Find payment refund by ID
        /// </summary>
        /// <remarks>
        /// Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Refund</returns>
        ApiResponse<Refund> GetAPaymentRefundWithHttpInfo(string paymentId, string refundId, int operationIndex = 0);
        /// <summary>
        /// Get all refunds for a payment
        /// </summary>
        /// <remarks>
        /// Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundForSearchResult</returns>
        RefundForSearchResult GetAllRefundsForAPayment(string paymentId, int operationIndex = 0);

        /// <summary>
        /// Get all refunds for a payment
        /// </summary>
        /// <remarks>
        /// Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundForSearchResult</returns>
        ApiResponse<RefundForSearchResult> GetAllRefundsForAPaymentWithHttpInfo(string paymentId, int operationIndex = 0);
        /// <summary>
        /// Search refunds
        /// </summary>
        /// <remarks>
        /// Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundSearchResults</returns>
        RefundSearchResults SearchRefunds(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0);

        /// <summary>
        /// Search refunds
        /// </summary>
        /// <remarks>
        /// Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundSearchResults</returns>
        ApiResponse<RefundSearchResults> SearchRefundsWithHttpInfo(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0);
        /// <summary>
        /// Submit a refund for a payment
        /// </summary>
        /// <remarks>
        /// Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Refund</returns>
        Refund SubmitARefundForAPayment(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0);

        /// <summary>
        /// Submit a refund for a payment
        /// </summary>
        /// <remarks>
        /// Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Refund</returns>
        ApiResponse<Refund> SubmitARefundForAPaymentWithHttpInfo(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundingCardPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find payment refund by ID
        /// </summary>
        /// <remarks>
        /// Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Refund</returns>
        System.Threading.Tasks.Task<Refund> GetAPaymentRefundAsync(string paymentId, string refundId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find payment refund by ID
        /// </summary>
        /// <remarks>
        /// Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        System.Threading.Tasks.Task<ApiResponse<Refund>> GetAPaymentRefundWithHttpInfoAsync(string paymentId, string refundId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all refunds for a payment
        /// </summary>
        /// <remarks>
        /// Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundForSearchResult</returns>
        System.Threading.Tasks.Task<RefundForSearchResult> GetAllRefundsForAPaymentAsync(string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all refunds for a payment
        /// </summary>
        /// <remarks>
        /// Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundForSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundForSearchResult>> GetAllRefundsForAPaymentWithHttpInfoAsync(string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search refunds
        /// </summary>
        /// <remarks>
        /// Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundSearchResults</returns>
        System.Threading.Tasks.Task<RefundSearchResults> SearchRefundsAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search refunds
        /// </summary>
        /// <remarks>
        /// Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundSearchResults>> SearchRefundsWithHttpInfoAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit a refund for a payment
        /// </summary>
        /// <remarks>
        /// Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Refund</returns>
        System.Threading.Tasks.Task<Refund> SubmitARefundForAPaymentAsync(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit a refund for a payment
        /// </summary>
        /// <remarks>
        /// Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        System.Threading.Tasks.Task<ApiResponse<Refund>> SubmitARefundForAPaymentWithHttpInfoAsync(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundingCardPaymentsApi : IRefundingCardPaymentsApiSync, IRefundingCardPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RefundingCardPaymentsApi : IRefundingCardPaymentsApi
    {
        private GovUKPayApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundingCardPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundingCardPaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundingCardPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundingCardPaymentsApi(string basePath)
        {
            this.Configuration = GovUKPayApiClient.Client.Configuration.MergeConfigurations(
                GovUKPayApiClient.Client.GlobalConfiguration.Instance,
                new GovUKPayApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundingCardPaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RefundingCardPaymentsApi(GovUKPayApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GovUKPayApiClient.Client.Configuration.MergeConfigurations(
                GovUKPayApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundingCardPaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RefundingCardPaymentsApi(GovUKPayApiClient.Client.ISynchronousClient client, GovUKPayApiClient.Client.IAsynchronousClient asyncClient, GovUKPayApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GovUKPayApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GovUKPayApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GovUKPayApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GovUKPayApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find payment refund by ID Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Refund</returns>
        public Refund GetAPaymentRefund(string paymentId, string refundId, int operationIndex = 0)
        {
            GovUKPayApiClient.Client.ApiResponse<Refund> localVarResponse = GetAPaymentRefundWithHttpInfo(paymentId, refundId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find payment refund by ID Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Refund</returns>
        public GovUKPayApiClient.Client.ApiResponse<Refund> GetAPaymentRefundWithHttpInfo(string paymentId, string refundId, int operationIndex = 0)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RefundingCardPaymentsApi->GetAPaymentRefund");
            }

            // verify the required parameter 'refundId' is set
            if (refundId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'refundId' when calling RefundingCardPaymentsApi->GetAPaymentRefund");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("refundId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(refundId)); // path parameter

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.GetAPaymentRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Refund>("/v1/payments/{paymentId}/refunds/{refundId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPaymentRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find payment refund by ID Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Refund</returns>
        public async System.Threading.Tasks.Task<Refund> GetAPaymentRefundAsync(string paymentId, string refundId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<Refund> localVarResponse = await GetAPaymentRefundWithHttpInfoAsync(paymentId, refundId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find payment refund by ID Return payment refund information by Refund ID The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="refundId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<Refund>> GetAPaymentRefundWithHttpInfoAsync(string paymentId, string refundId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RefundingCardPaymentsApi->GetAPaymentRefund");
            }

            // verify the required parameter 'refundId' is set
            if (refundId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'refundId' when calling RefundingCardPaymentsApi->GetAPaymentRefund");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("refundId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(refundId)); // path parameter

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.GetAPaymentRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Refund>("/v1/payments/{paymentId}/refunds/{refundId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPaymentRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all refunds for a payment Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundForSearchResult</returns>
        public RefundForSearchResult GetAllRefundsForAPayment(string paymentId, int operationIndex = 0)
        {
            GovUKPayApiClient.Client.ApiResponse<RefundForSearchResult> localVarResponse = GetAllRefundsForAPaymentWithHttpInfo(paymentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all refunds for a payment Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundForSearchResult</returns>
        public GovUKPayApiClient.Client.ApiResponse<RefundForSearchResult> GetAllRefundsForAPaymentWithHttpInfo(string paymentId, int operationIndex = 0)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RefundingCardPaymentsApi->GetAllRefundsForAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.GetAllRefundsForAPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefundForSearchResult>("/v1/payments/{paymentId}/refunds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRefundsForAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all refunds for a payment Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundForSearchResult</returns>
        public async System.Threading.Tasks.Task<RefundForSearchResult> GetAllRefundsForAPaymentAsync(string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<RefundForSearchResult> localVarResponse = await GetAllRefundsForAPaymentWithHttpInfoAsync(paymentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all refunds for a payment Return refunds for a payment. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundForSearchResult)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<RefundForSearchResult>> GetAllRefundsForAPaymentWithHttpInfoAsync(string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RefundingCardPaymentsApi->GetAllRefundsForAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.GetAllRefundsForAPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefundForSearchResult>("/v1/payments/{paymentId}/refunds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRefundsForAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search refunds Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundSearchResults</returns>
        public RefundSearchResults SearchRefunds(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0)
        {
            GovUKPayApiClient.Client.ApiResponse<RefundSearchResults> localVarResponse = SearchRefundsWithHttpInfo(fromDate, toDate, fromSettledDate, toSettledDate, page, displaySize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search refunds Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundSearchResults</returns>
        public GovUKPayApiClient.Client.ApiResponse<RefundSearchResults> SearchRefundsWithHttpInfo(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0)
        {
            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (fromSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_settled_date", fromSettledDate));
            }
            if (toSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_settled_date", toSettledDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (displaySize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "display_size", displaySize));
            }

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.SearchRefunds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RefundSearchResults>("/v1/refunds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRefunds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search refunds Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundSearchResults</returns>
        public async System.Threading.Tasks.Task<RefundSearchResults> SearchRefundsAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<RefundSearchResults> localVarResponse = await SearchRefundsWithHttpInfoAsync(fromDate, toDate, fromSettledDate, toSettledDate, page, displaySize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search refunds Search refunds by &#39;from&#39; and &#39;to&#39; date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date of refunds to be searched (this date is inclusive). Example&#x3D;2015-08-13T12:35:00Z (optional)</param>
        /// <param name="toDate">To date of refunds to be searched (this date is exclusive). Example&#x3D;2015-08-14T12:35:00Z (optional)</param>
        /// <param name="fromSettledDate">From settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="toSettledDate">To settled date of refund to be searched (this date is inclusive). Example&#x3D;2015-08-13 (optional)</param>
        /// <param name="page">Page number requested for the search, should be a positive integer (optional, defaults to 1) (optional)</param>
        /// <param name="displaySize">Number of results to be shown per page, should be a positive integer (optional, defaults to 500, max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundSearchResults)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<RefundSearchResults>> SearchRefundsWithHttpInfoAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (fromSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_settled_date", fromSettledDate));
            }
            if (toSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_settled_date", toSettledDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (displaySize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "display_size", displaySize));
            }

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.SearchRefunds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RefundSearchResults>("/v1/refunds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRefunds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a refund for a payment Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Refund</returns>
        public Refund SubmitARefundForAPayment(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0)
        {
            GovUKPayApiClient.Client.ApiResponse<Refund> localVarResponse = SubmitARefundForAPaymentWithHttpInfo(paymentId, paymentRefundRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a refund for a payment Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Refund</returns>
        public GovUKPayApiClient.Client.ApiResponse<Refund> SubmitARefundForAPaymentWithHttpInfo(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RefundingCardPaymentsApi->SubmitARefundForAPayment");
            }

            // verify the required parameter 'paymentRefundRequest' is set
            if (paymentRefundRequest == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentRefundRequest' when calling RefundingCardPaymentsApi->SubmitARefundForAPayment");
            }

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.Data = paymentRefundRequest;

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.SubmitARefundForAPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Refund>("/v1/payments/{paymentId}/refunds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitARefundForAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a refund for a payment Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Refund</returns>
        public async System.Threading.Tasks.Task<Refund> SubmitARefundForAPaymentAsync(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<Refund> localVarResponse = await SubmitARefundForAPaymentWithHttpInfoAsync(paymentId, paymentRefundRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a refund for a payment Return issued refund information. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <param name="paymentRefundRequest">requestPayload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<Refund>> SubmitARefundForAPaymentWithHttpInfoAsync(string paymentId, PaymentRefundRequest paymentRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RefundingCardPaymentsApi->SubmitARefundForAPayment");
            }

            // verify the required parameter 'paymentRefundRequest' is set
            if (paymentRefundRequest == null)
            {
                throw new GovUKPayApiClient.Client.ApiException(400, "Missing required parameter 'paymentRefundRequest' when calling RefundingCardPaymentsApi->SubmitARefundForAPayment");
            }


            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", GovUKPayApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.Data = paymentRefundRequest;

            localVarRequestOptions.Operation = "RefundingCardPaymentsApi.SubmitARefundForAPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Refund>("/v1/payments/{paymentId}/refunds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitARefundForAPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
