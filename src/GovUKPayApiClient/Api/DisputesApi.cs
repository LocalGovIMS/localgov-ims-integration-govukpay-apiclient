/*
 * GOV.UK Pay API
 *
 * GOV.UK Pay API
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GovUKPayApiClient.Client;
using GovUKPayApiClient.Model;

namespace GovUKPayApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisputesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search disputes
        /// </summary>
        /// <remarks>
        /// Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DisputesSearchResults</returns>
        DisputesSearchResults SearchDisputes(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0);

        /// <summary>
        /// Search disputes
        /// </summary>
        /// <remarks>
        /// Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DisputesSearchResults</returns>
        ApiResponse<DisputesSearchResults> SearchDisputesWithHttpInfo(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisputesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search disputes
        /// </summary>
        /// <remarks>
        /// Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DisputesSearchResults</returns>
        System.Threading.Tasks.Task<DisputesSearchResults> SearchDisputesAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search disputes
        /// </summary>
        /// <remarks>
        /// Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </remarks>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DisputesSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisputesSearchResults>> SearchDisputesWithHttpInfoAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisputesApi : IDisputesApiSync, IDisputesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DisputesApi : IDisputesApi
    {
        private GovUKPayApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DisputesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisputesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisputesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisputesApi(string basePath)
        {
            this.Configuration = GovUKPayApiClient.Client.Configuration.MergeConfigurations(
                GovUKPayApiClient.Client.GlobalConfiguration.Instance,
                new GovUKPayApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisputesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DisputesApi(GovUKPayApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GovUKPayApiClient.Client.Configuration.MergeConfigurations(
                GovUKPayApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GovUKPayApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisputesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DisputesApi(GovUKPayApiClient.Client.ISynchronousClient client, GovUKPayApiClient.Client.IAsynchronousClient asyncClient, GovUKPayApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GovUKPayApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GovUKPayApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GovUKPayApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GovUKPayApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GovUKPayApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search disputes Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DisputesSearchResults</returns>
        public DisputesSearchResults SearchDisputes(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0)
        {
            GovUKPayApiClient.Client.ApiResponse<DisputesSearchResults> localVarResponse = SearchDisputesWithHttpInfo(fromDate, toDate, fromSettledDate, toSettledDate, status, page, displaySize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search disputes Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DisputesSearchResults</returns>
        public GovUKPayApiClient.Client.ApiResponse<DisputesSearchResults> SearchDisputesWithHttpInfo(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0)
        {
            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (fromSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_settled_date", fromSettledDate));
            }
            if (toSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_settled_date", toSettledDate));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (displaySize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "display_size", displaySize));
            }

            localVarRequestOptions.Operation = "DisputesApi.SearchDisputes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DisputesSearchResults>("/v1/disputes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDisputes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search disputes Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DisputesSearchResults</returns>
        public async System.Threading.Tasks.Task<DisputesSearchResults> SearchDisputesAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GovUKPayApiClient.Client.ApiResponse<DisputesSearchResults> localVarResponse = await SearchDisputesWithHttpInfoAsync(fromDate, toDate, fromSettledDate, toSettledDate, status, page, displaySize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search disputes Search disputes by status, &#39;from&#39; and &#39;to&#39; date, and &#39;from&#39; and &#39;to&#39; settled_date. The Authorisation token needs to be specified in the &#39;authorization&#39; header as &#39;authorization: Bearer YOUR_API_KEY_HERE&#39;
        /// </summary>
        /// <exception cref="GovUKPayApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">Returns disputes raised on or after the &#39;from_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="toDate">Returns disputes raised before the &#39;to_date&#39; Date and time must be coordinated Universal Time (UTC) and ISO 8601 format to second-level accuracy - &#39;YYYY-MM-DDTHH:MM:SSZ&#39;. (optional)</param>
        /// <param name="fromSettledDate">Returns disputes settled on or after the &#39;from_settled_date&#39;. Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;. Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account.You can only use &#39;from_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="toSettledDate">Returns disputes settled before the &#39;to_settled_date&#39;. &#39;Date must be in ISO 8601 format to date-level accuracy - &#39;YYYY-MM-DD&#39;.Disputes are settled when your payment service provider takes the disputed amount from a payout to your bank account. You can only use &#39;to_settled_date&#39; to find disputes raised on or after 8 August 2022. (optional)</param>
        /// <param name="status">Returns disputes with a matching &#39;status&#39;. &#39;status&#39; reflects what stage of the dispute process a dispute is at. (optional)</param>
        /// <param name="page">Returns a specific page of results. Defaults to &#39;1&#39;. (optional)</param>
        /// <param name="displaySize">The number of disputes returned per results page. Defaults to &#39;500&#39;. Maximum value is &#39;500&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DisputesSearchResults)</returns>
        public async System.Threading.Tasks.Task<GovUKPayApiClient.Client.ApiResponse<DisputesSearchResults>> SearchDisputesWithHttpInfoAsync(string fromDate = default(string), string toDate = default(string), string fromSettledDate = default(string), string toSettledDate = default(string), string status = default(string), string page = default(string), string displaySize = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GovUKPayApiClient.Client.RequestOptions localVarRequestOptions = new GovUKPayApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GovUKPayApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GovUKPayApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (fromSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "from_settled_date", fromSettledDate));
            }
            if (toSettledDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "to_settled_date", toSettledDate));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (displaySize != null)
            {
                localVarRequestOptions.QueryParameters.Add(GovUKPayApiClient.Client.ClientUtils.ParameterToMultiMap("", "display_size", displaySize));
            }

            localVarRequestOptions.Operation = "DisputesApi.SearchDisputes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DisputesSearchResults>("/v1/disputes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDisputes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
